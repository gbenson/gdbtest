VM 1. Installed Fedora-Workstation-Live-x86_64-31-1.9.iso in VM, no
      special choices.  It didn't reboot (
[  OK  ] Reached target Reboot.
[72550.060803] printk: shutdown: 12 output lines suppressed due to ratelimiting
      ) so I had to Force off"
      => Screenshot_fedora31_2020-02-07_11:39:45.png
      => /var/lib/libvirt/images/fedora31.qcow2.202002071153
      [cp -a --reflink=auto fedora31.qcow2{,.$(date --utc +%Y%m%d%H%M)}]
      NB this is on blade (RHEL7.7)

Cr 2. buildah bud
      buildah tag 6ead8216858b docker.io/gbenson/gdbtest-back2back:6ead8216858b
      [git mv Dockerfile{,.1-6ead8216858b}] ...etc
      podman push docker.io/gbenson/gdbtest-back2back:6ead8216858b
      podman run -ti 6ead8216858b
        rpm -qa | sort > rpm-qa.container-6ead8216858b
	scp rpm-qa.container-6ead8216858b gary@smash.nx:work/gdbtest/back2back
      [git add rpm-qa.container-6ead8216858b] ...etc
      cleanup: [podman rm -a]

VM 3. a) On VM, booted up,
         did firstboot setup,
         mkdir -m700 .ssh
         Settings -> Sharing -> On
         Settings -> Sharing -> Remote Login -> On
      b) On host, added entry to ~/.ssh/config,
         rsync -a .ssh/authorized_keys fedora31:.ssh

VM 4. Set the root password as per https://gbenson.net/?p=685
      [grep root /etc/shadow -> root:!::0:99999:7:::], rebooted,
      su - [echo 'gbenson ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers]
      sudo dnf -y update
      [warnings, too many to put them all here]
      rpm -qa | sort > rpm-qa.vm-$(date --utc +%Y%m%d%H%M)
      scp rpm-qa.vm-202002071318 gary@192.168.1.3:work/gdbtest/back2back
      [git add rpm-qa.vm-202002071318] ...etc
      sudo poweroff
      [cp -a --reflink=auto fedora31.qcow2{,.$(date --utc +%Y%m%d%H%M)}]
      => /var/lib/libvirt/images/fedora31.qcow2.202002071545

VM 5. sudo useradd --system --no-log-init --create-home --home-dir=/gdbtest gdbtest
      sudo su - gdbtest
      pwd  # == /gdbtest
      dnf -y download --source gdb  # == gdb-8.3.50.20190824-28.fc31.src.rpm
      logout
      sudo dnf -y install rpm-build
      => rpm-qa.vm-202002111043
      sudo dnf -y builddep /gdbtest/gdb-8.3.50.20190824-28.fc31.src.rpm
      => rpm-qa.vm-202002111043
      sudo su - gdbtest
      pwd  # == /gdbtest
      $ rpmbuild --rebuild gdb-8.3.50.20190824-28.fc31.src.rpm
      error: Failed build dependencies:
              libipt-devel is needed by gdb-8.3.50.20190824-28.fc31.x86_64
      => gdb-8.3.50.20190824-28.fc31.spec
                                                 WORKAROUND FOR FAILURE
VM 6. sudo su - gdbtest                      <== TO INSTALL libipt-devel
      pwd  # == /gdbtest
      rpm -i gdb-8.3.50.20190824-28.fc31.src.rpm
      rpmbuild -bs rpmbuild/SPECS/gdb.spec
      sudo dnf builddep -y /gdbtest/rpmbuild/SRPMS/gdb-8.3.50.20190824-28.fc31.src.rpm
      # Installing: libipt-devel, Reinstalling: perl-podlators
      => rpm-qa.vm-202002111558  # just +libipt-devel-2.0-3.fc31.x86_64
      $ rpmbuild --rebuild gdb-8.3.50.20190824-28.fc31.src.rpm
      /var/tmp/rpm-tmp.F3BTHy: line 101: make: command not found
      error: Bad exit status from /var/tmp/rpm-tmp.F3BTHy (%build)

VM 7. sudo dnf install -y make
      rpmbuild --rebuild gdb-8.3.50.20190824-28.fc31.src.rpm  # it built.

VM 8. rm -Rf rpmbuild
      rpm -i gdb-8.3.50.20190824-28.fc31.src.rpm
      rpmbuild -bs --with testsuite rpmbuild/SPECS/gdb.spec
      sudo dnf builddep -y /gdbtest/rpmbuild/SRPMS/gdb-8.3.50.20190824-28.fc31.src.rpm
      => rpm-qa.vm-202002111750
      rm -Rf rpmbuild
      rpmbuild --rebuild --with testsuite gdb-8.3.50.20190824-28.fc31.src.rpm 2>&1 \
        | tee build-log-$(date --utc +%Y%m%d%H%M)

BM 1: sudo useradd --system --no-log-init --create-home --home-dir=/gdbtest gdbtest
      sudo su - gdbtest
      pwd  # == /gdbtest
      dnf -y download --source gdb  # == gdb-8.3.50.20190824-28.fc31.src.rpm
      md5sum gdb-*.src.rpm  # == 4687105fb0cbe59ae2457e51a4672c6f
      # wait...

BM 2: # ...as gary
      md5sum gdb-*.src.rpm  # == 4687105fb0cbe59ae2457e51a4672c6f
      mock -r fedora-31-x86_64 --rebuild gdb-8.3.50.20190824-28.fc31.src.rpm \
        --with=testsuite \
        >mock-build-$(date --utc +%Y%m%d%H%M).log 2>&1 # in screen
      # N.B. there's almost nothing in that logfile
      sudo tar cPf mock-build-202002181647.tar /var/lib/mock/fedora-31-x86_64
      # N.B. it's 6.1 GiB.
      uudecode /var/lib/mock/fedora-31-x86_64/result/build.log
      # ...writes gdb-x86_64-redhat-linux-gnu.tar.bz2
      # Note that, from /var/lib/mock/.../build.log, the checks were invoked as:
      ./orphanripper make -j4 -k \
          check//unix/-m64 \
          check//native-gdbserver/-m64 \
          check//native-extended-gdbserver/-m64 \
          check//unix/-m32 \
          check//native-gdbserver/-m32 \
          check//native-extended-gdbserver/-m32

BM 3: # ...as gary
      rm -rf ~/rpmbuild
      md5sum gdb-8.3.50.20190824-28.fc31.src.rpm
      # == 4687105fb0cbe59ae2457e51a4672c6f
      rpm -ivh ~/gdb-8.3.50.20190824-28.fc31.src.rpm
      # ...then edit rpmbuild/SPECS/gdb.spec...
      rpmbuild -bs --with testsuite --with clangtests ~/rpmbuild/SPECS/gdb.spec
      # Wrote: /home/gary/rpmbuild/SRPMS/gdb-8.3.50.20190824-28.fc31.gbenson1.src.rpm
      rpm -qp --requires ~/rpmbuild/SRPMS/gdb-8.3.50.20190824-28.fc31.gbenson1.src.rpm
      # clang is there
      mock -r fedora-31-x86_64 \
        --rebuild ~/rpmbuild/SRPMS/gdb-8.3.50.20190824-28.fc31.gbenson1.src.rpm \
        --with=testsuite \
	--with=clangtests \
	>mock-build-$(date --utc +%Y%m%d%H%M).log 2>&1 # in screen, as before
      WTF?
      mockbuild.exception.Error: Command failed:
      # /usr/bin/systemd-nspawn -q -M 288000fe39e74d57a361ccbd5b6e15e2 -D /var/lib/mock/fedora-31-x86_64/root -a --capability=cap_ipc_lock --bind=/tmp/mock-resolv.o2rp3ux_:/etc/resolv.conf --setenv=TERM=vt100 --setenv=SHELL=/bin/bash --setenv=HOME=/builddir --setenv=HOSTNAME=mock --setenv=PATH=/usr/bin:/bin:/usr/sbin:/sbin --setenv=PROMPT_COMMAND=printf "\033]0;<mock-chroot>\007" --setenv=PS1=<mock-chroot> \s-\v\$  --setenv=LANG=en_GB.utf8 -u mockbuild bash --login -c /usr/bin/rpmbuild -bb --target x86_64 --nodeps /builddir/build/SPECS/gdb.spec

      Oh, its:
      /usr/bin/clang -o read1.so /builddir/build/BUILD/gdb-8.3.50.20190824/gdb/testsuite/lib/read1.c -Wall -g -shared -fPIC -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection  -DDNF_DEBUGINFO_INSTALL
      clang-9: error: unknown argument: '-fstack-clash-protection'

      Need to:
      1. lose -fstack-clash-protection (make it fail)
      2. lose -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 (makes it complain)
       ...more?

      Note that this is the one random file built by gdb/testsuite/Makefile.in:
	read1.so: lib/read1.c
		$(CC) -o $@ ${srcdir}/lib/read1.c -Wall -g -shared -fPIC $(CFLAGS)
      so its $(CFLAGS) need changing.  They've come from $(TARGET_FLAGS_TO_PASS);
      is that the one set earlier in that file, or the one passed by the make check
      invocation in the parent (gdb/Makefile.in)?

      Oh, hey, read1.so is LD_PRELOADed into expect, so should it *not*
      be CC_FOR_TARGET?  I have no idea :(

Cr 3: cd targets/gcc
      #screen
      buildah bud -t docker.io/gbenson/gdbtest-fedora31-upstream-gcc:latest
      # 2>&1 | tee ~/buildah-gcc-log-$(date --utc +%Y%m%d%H%M)
      ls -l buildah-gcc-log-202002261233
      -rw-r--r--. 1 gary gary 2192910 Feb 26 13:22 buildah-gcc-log-202002261233
      i.e. it took 49 minutes
      podman push docker.io/gbenson/gdbtest-fedora31-upstream-gcc:latest
      podman run -ti gbenson/gdbtest-fedora31-upstream-gcc \
        cat build/gdb/testsuite/gdb.sum \
	  > back2back/gcc-in-container-db2e50584ecd.sum

BM 4: podman run -ti docker.io/gbenson/gdbtest-fedora31-upstream  # From the FROM in the Dockerfile
      -> tar cPf /tmp/gdbtest-fedora31-upstream-baf628cfcdfe.tar /gdbtest
      -> xz /tmp/gdbtest-fedora31-upstream-baf628cfcdfe.tar
      -> exit
      podman start relaxed_haslett
      podman exec relaxed_haslett cat /tmp/gdbtest-fedora31-upstream-baf628cfcdfe.tar.xz > gdbtest-fedora31-upstream-baf628cfcdfe.tar.xz
      podman stop -a
      sudo mv gdbtest-fedora31-upstream-baf628cfcdfe.tar.xz /gdbtest
      sudo su - gdbtest
      -> tar xPf gdbtest-fedora31-upstream-baf628cfcdfe.tar.xz
      -> make -C /gdbtest/build $(rpmbuild --eval='%{?_smp_mflags}') -k check 2>&1 | tee make-check.log
      -> # From the RUN in the Dockerfile
      -> exit
      sudo cat /gdbtest/build/gdb/testsuite/gdb.sum \
        > back2back/baremetal-gcc-20200226-1.sum

BM 5: sudo su - gdbtest
      mkdir baremetal-gcc-20200226-1
      mv src build make-check.log baremetal-gcc-20200226-1
      tar xPf gdbtest-fedora31-upstream-baf628cfcdfe.tar.xz
      make -C /gdbtest/build $(rpmbuild --eval='%{?_smp_mflags}') -k \
        CC_FOR_TARGET=/usr/bin/clang CXX_FOR_TARGET=/usr/bin/clang++ \
        check 2>&1 | tee make-check.log
      exit
      ...
      sudo cat /gdbtest/build/gdb/testsuite/gdb.sum \
        > back2back/baremetal-clang-20200227-1.sum
      sudo su - gdbtest
      mkdir baremetal-clang-20200227-1
      mv src build make-check.log baremetal-clang-20200227-1
      => it didn't work, it used GCC for most of it :(
      NB. objdump -sj.comment FILE...

BM 6: sudo su - gdbtest
      rm -rf build src make-check.log
      tar xPf gdbtest-fedora31-upstream-baf628cfcdfe.tar.xz
      make -C /gdbtest/build $(rpmbuild --eval='%{?_smp_mflags}') -k \
        RUNTESTFLAGS='CC_FOR_TARGET="/usr/bin/clang" CXX_FOR_TARGET="/usr/bin/clang++"' \
        check 2>&1 | tee make-check.log
      mkdir baremetal-clang-20200227-2
      mv src build make-check.log baremetal-clang-20200227-2
      chmod -w baremetal-*
      exit
      ...
      sudo cat /gdbtest/baremetal-clang-20200227-2/build/gdb/testsuite/gdb.sum \
        > baremetal-clang-20200227-2.log
      => it mostly worked: Clang for building to .o, GCC for linking:

bash$ objdump -sj.comment build/gdb/gdb

build/gdb/gdb:     file format elf64-x86-64

Contents of section .comment:
 0000 4743433a 2028474e 55292039 2e322e31  GCC: (GNU) 9.2.1
 0010 20323031 39303832 37202852 65642048   20190827 (Red H
 0020 61742039 2e322e31 2d312900           at 9.2.1-1).
bash$ objdump -sj.comment build/gdb/testsuite/read1.so

build/gdb/testsuite/read1.so:     file format elf64-x86-64

Contents of section .comment:
 0000 4743433a 2028474e 55292039 2e322e31  GCC: (GNU) 9.2.1
 0010 20323031 39303832 37202852 65642048   20190827 (Red H
 0020 61742039 2e322e31 2d312900           at 9.2.1-1).
bash$ objdump -sj.comment build/gdb/testsuite/outputs/gdb.base/memattr/memattr0.o

build/gdb/testsuite/outputs/gdb.base/memattr/memattr0.o:     file format elf64-x86-64

Contents of section .comment:
 0000 00636c61 6e672076 65727369 6f6e2039  .clang version 9
 0010 2e302e30 20284665 646f7261 20392e30  .0.0 (Fedora 9.0
 0020 2e302d31 2e666333 312900             .0-1.fc31).

bash$ objdump -sj.comment build/gdb/testsuite/outputs/gdb.base/memattr/memattr

build/gdb/testsuite/outputs/gdb.base/memattr/memattr:     file format elf64-x86-64

Contents of section .comment:
 0000 4743433a 2028474e 55292039 2e322e31  GCC: (GNU) 9.2.1
 0010 20323031 39303832 37202852 65642048   20190827 (Red H
 0020 61742039 2e322e31 2d312900 636c616e  at 9.2.1-1).clan
 0030 67207665 7273696f 6e20392e 302e3020  g version 9.0.0
 0040 28466564 6f726120 392e302e 302d312e  (Fedora 9.0.0-1.
 0050 66633331 2900                        fc31).

Compare results
 - grep '\(PASS\|FAIL\|UN\(TEST\|SUPPORT\)ED\):' baremetal-X.sum > Y.passfail
 - diff -u baremetal-{gcc-20200226-1,clang-20200227-2}.passfail
 - NB rpmbuild --eval='%{?_smp_mflags}' says "-j4"
 - NB RUNTESTFLAGS disables parallel testing?
 [https://sourceware.org/gdb/wiki/TestingGDB#RUNTESTFLAGS_and_parallel_.28-j.29_testing]
 - Hmmm...

BM 7: screen -S baremetal
      sudo su - gdbtest

   a) tar xPf gdbtest-fedora31-upstream-baf628cfcdfe.tar.xz
      time make -C /gdbtest/build -k check >make-check.log 2>&1
      # real    28m53.999s
      # user    19m27.496s
      # sys     4m19.006s
      mkdir baremetal-gcc-20200304-1
      mv src build make-check.log baremetal-gcc-20200304-1
      chmod 755 baremetal-*

   b) tar xPf gdbtest-fedora31-upstream-baf628cfcdfe.tar.xz
      time make -C /gdbtest/build -k \
        RUNTESTFLAGS='CC_FOR_TARGET="/usr/bin/clang" CXX_FOR_TARGET="/usr/bin/clang++"' \
        check >make-check.log 2>&1
      # real    47m19.813s
      # user    22m12.228s
      # sys     4m42.252s
      mkdir baremetal-clang-20200304-1
      mv src build make-check.log baremetal-clang-20200304-1
      chmod 755 baremetal-*

   c) exit
      for i in gcc clang; do
        for j in sum log; do
          sudo cat /gdbtest/baremetal-$i-20200304-1/build/gdb/testsuite/gdb.$j \
            > baremetal-$i-20200304-1.$j
        done
      done

   d) TANGENT: Q: should I specify LD_FOR_TARGET="/usr/bin/clang"?
               A: no, it's wrong, clang doesn't take the same command
                  line arguments ld does, and this causes one test
	          (gdb.asm/asm-source.exp) to go PASS*29 => UNTESTED*1.
		  Also there were two other (spurious?) changes.
      tar xPf gdbtest-fedora31-upstream-baf628cfcdfe.tar.xz
      time make -C /gdbtest/build -k \
        RUNTESTFLAGS='CC_FOR_TARGET="/usr/bin/clang" \
                      CXX_FOR_TARGET="/usr/bin/clang++"' \
		      LD_FOR_TARGET="/usr/bin/clang"' \
        check >make-check.log 2>&1
      # real    47m19.813s
      # user    22m12.228s
      # sys     4m42.252s
      mkdir baremetal-clang-20200304-2
      mv src build make-check.log baremetal-clang-20200304-2
      chmod 755 baremetal-*
      ...
      for k in 1 2; do
        f=baremetal-clang-20200304-$k
	grep '\(PASS\|FAIL\|UN\(TEST\|SUPPORT\)ED\):' $f.sum > $f.pf
      done
      diff -u0 baremetal-clang-20200304-[12].pf
      @@ -1478,29 +1478 @@
      -PASS: gdb.asm/asm-source.exp: $whatever x 29
      +UNTESTED: gdb.asm/asm-source.exp: failed to link
      @@ -18876 +18848 @@
      -FAIL: gdb.base/so-impl-ld.exp: step out of solib call
      +FAIL: gdb.base/so-impl-ld.exp: step out of solib call (the program exited)
      @@ -50763 +50735 @@
      -KFAIL: gdb.threads/process-dies-while-handling-bp.exp: non_stop=off: cond_bp_target=0: inferior 1 exited (memory error) (PRMS: gdb/18749)
      +KFAIL: gdb.threads/process-dies-while-handling-bp.exp: non_stop=off: cond_bp_target=0: inferior 1 exited (prompt) (PRMS: gdb/18749)

   b) TANGENT: Q: it's only gdb.asm/asm-source.exp that's affected?
               A: sure looks that way:

      tar xPf gdbtest-fedora31-upstream-baf628cfcdfe.tar.xz
      time make -C /gdbtest/build -k \
        RUNTESTFLAGS='LD_FOR_TARGET="/bin/false"' \
        check >make-check.log 2>&1
      # real    28m10.930s
      # user    18m56.776s
      # sys     4m10.840s
      mkdir baremetal-gcc-false-20200305-1
      mv src build make-check.log baremetal-gcc-false-20200305-1
      chmod 755 baremetal-*
      ...
      for r in 20200304 false-20200305; do
        f=baremetal-gcc-$r-1
        grep '\(PASS\|FAIL\|UN\(TEST\|SUPPORT\)ED\):' $f.sum > $f.pf
      done
      diff -u0 baremetal-gcc-2*.pf baremetal-gcc-false-20200305-1.pf
      @@ -1478,29 +1478 @@
      -PASS: gdb.asm/asm-source.exp: $whatever x 29
      +UNTESTED: gdb.asm/asm-source.exp: failed to link
      ...as before
      (possibly there were spurious changes too, but I deleted the files)

   c) TANGENT: Q: Are baremetal-clang-{20200227-2,20200304-1} equivalent?
      	       A: It looks that way:

      diff -u0 baremetal-clang-{20200227-2,20200304-1}.pf
      @@ -49277 +49277 @@
      -XFAIL: gdb.threads/attach-many-short-lived-threads.exp: iter 1: attach (EPERM)
      +PASS: gdb.threads/attach-many-short-lived-threads.exp: iter 1: attach
      @@ -49354 +49354 @@
      -XFAIL: gdb.threads/attach-many-short-lived-threads.exp: iter 8: attach (EPERM)
      +PASS: gdb.threads/attach-many-short-lived-threads.exp: iter 8: attach
      @@ -49365 +49365 @@
      -XFAIL: gdb.threads/attach-many-short-lived-threads.exp: iter 9: attach (EPERM)
      +PASS: gdb.threads/attach-many-short-lived-threads.exp: iter 9: attach
      @@ -50763 +50763 @@
      -KFAIL: gdb.threads/process-dies-while-handling-bp.exp: non_stop=off: cond_bp_target=0: inferior 1 exited (prompt) (PRMS: gdb/18749)
      +KFAIL: gdb.threads/process-dies-while-handling-bp.exp: non_stop=off: cond_bp_target=0: inferior 1 exited (memory error) (PRMS: gdb/18749)

Compare results (take 2)
========================
  Can diff sum files directly now GCC results are in sequence:

    diff -u baremetal-{gcc,clang}-20200304-1.sum | less

  It was nice, but there's so many n*PASS => 1*UNTESTED ones because
  of this or that testcase failing to compile with Clang.  Could do
  with something to strip those cases out (fixing testcases to compile
  with Clang is *not* my task here, not yet anyhow!)

Running specific tests
======================
  sudo su - gdbtest
  tar cf baremetal-gcc-20200304-1{.tar,}
  tar cf baremetal-clang-20200304-1{.tar,}
  ln -s baremetal-clang-20200304-1/src
  ln -s baremetal-clang-20200304-1/build
  export RUNTESTFLAGS='CC_FOR_TARGET="/usr/bin/clang" CXX_FOR_TARGET="/usr/bin/clang++"'
  cd build
  make TESTS="gdb.dwarf2/comp-unit-lang.exp" check
  less gdb/testsuite/gdb.log
  grep spawn.*data gdb/testsuite/gdb.log # for the GDB commands

FOR FUTURE RUNS:
 1: I don't think we need the /usr/bin in /usr/bin/clang{,++}
 2. dnf install libdwarf-tools in the containers for dwarfdump

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

gdb.compile/compile*.exp
------------------------
 - C++ injection tests
 - keiths: these are unequivocally unrunnable on clang
 - they ought to be runnable IMO, but plainly not now

=> ignore these failures for now

gdb.dwarf2/comp-unit-lang.exp
-----------------------------

# Test that GDB determines the frame's language based on the comp
# unit's language, even if the file has an unknown file extension,
# such as ".txt".

Executables:
 objdump -W baremetal-gcc-20200304-1/build/gdb/testsuite/outputs/gdb.dwarf2/comp-unit-lang/comp-unit-lang > gdb.dwarf2_comp-unit-lang/exe-gcc-objdump-W
 objdump -W baremetal-clang-20200304-1/build/gdb/testsuite/outputs/gdb.dwarf2/comp-unit-lang/comp-unit-lang > gdb.dwarf2_comp-unit-lang/exe-clang-objdump-W
 diff -u gdb.dwarf2_comp-unit-lang/exe-{gcc,clang}-objdump-W | less
  1. both have DW_AT_language : 4 (C++)
  2. a bunch of addresses changed
  3. Clang one has no .debug_line section

comp-unit-lang0.o:
 objdump -W baremetal-gcc-20200304-1/build/gdb/testsuite/outputs/gdb.dwarf2/comp-unit-lang/comp-unit-lang0.o > gdb.dwarf2_comp-unit-lang/obj0-gcc-objdump-W
 objdump -W baremetal-clang-20200304-1/build/gdb/testsuite/outputs/gdb.dwarf2/comp-unit-lang/comp-unit-lang0.o > gdb.dwarf2_comp-unit-lang/obj0-clang-objdump-W
 diff -u gdb.dwarf2_comp-unit-lang/obj0-{gcc,clang}-objdump-W | less
  1. this is the one with the changed addresses

comp-unit-lang1.o:
 objdump -W baremetal-gcc-20200304-1/build/gdb/testsuite/outputs/gdb.dwarf2/comp-unit-lang/comp-unit-lang1.o > gdb.dwarf2_comp-unit-lang/obj1-gcc-objdump-W
 objdump -W baremetal-clang-20200304-1/build/gdb/testsuite/outputs/gdb.dwarf2/comp-unit-lang/comp-unit-lang1.o > gdb.dwarf2_comp-unit-lang/obj1-clang-objdump-W
 diff -u gdb.dwarf2_comp-unit-lang/obj1-{gcc,clang}-objdump-W | less
  1. both have DW_AT_language : 4 (C++)
  2. This is the one where the Clang one has no .debug_line section

Where does comp-unit-lang1.o come from?
  comp-unit-lang.S

Are they the same?
  diff -u baremetal-{gcc,clang}-20200304-1/build/gdb/testsuite/outputs/gdb.dwarf2/comp-unit-lang/comp-unit-lang.S
   -> yes

Other tools:
  dwarfdump doesn't show any differences between gcc and clang
  readelf --debug-dump=line baremetal-gcc-20200304-1/build/gdb/testsuite/outputs/gdb.dwarf2/comp-unit-lang/comp-unit-lang1.o prints stuff, including:
   - The Directory Table is empty.
   - The File Name Table is empty.
   - No Line Number Statements.
  readelf --debug-dump=line baremetal-clang-20200304-1/build/gdb/testsuite/outputs/gdb.dwarf2/comp-unit-lang/comp-unit-lang1.o prints nothing at all
  readelf --debug-dump=decodedline baremetal-gcc-20200304-1/build/gdb/testsuite/outputs/gdb.dwarf2/comp-unit-lang/comp-unit-lang1.o prints a header only
  readelf --debug-dump=decodedline baremetal-clang-20200304-1/build/gdb/testsuite/outputs/gdb.dwarf2/comp-unit-lang/comp-unit-lang1.o prints nothing at all

  grep section baremetal-gcc-20200304-1/build/gdb/testsuite/outputs/gdb.dwarf2/comp-unit-lang/comp-unit-lang.S
          .section .debug_info
          .section .debug_abbrev
  so .debug_lines comes from GCC

comp-unit-lang1.o again:
  objdump -s baremetal-gcc-20200304-1/build/gdb/testsuite/outputs/gdb.dwarf2/comp-unit-lang/comp-unit-lang1.o > gdb.dwarf2_comp-unit-lang/obj1-gcc-objdump-s
  objdump -s baremetal-clang-20200304-1/build/gdb/testsuite/outputs/gdb.dwarf2/comp-unit-lang/comp-unit-lang1.o > gdb.dwarf2_comp-unit-lang/obj1-clang-objdump-s
  diff -u gdb.dwarf2_comp-unit-lang/obj1-{gcc,clang}-objdump-s

--- gdb.dwarf2_comp-unit-lang/obj1-gcc-objdump-s	2020-04-08 15:21:45.445967175 +0100
+++ gdb.dwarf2_comp-unit-lang/obj1-clang-objdump-s	2020-04-08 15:21:52.021814101 +0100
@@ whatever @@

-baremetal-gcc-20200304-1/build/gdb/testsuite/outputs/gdb.dwarf2/comp-unit-lang/comp-unit-lang1.o:     file format elf64-x86-64
+baremetal-clang-20200304-1/build/gdb/testsuite/outputs/gdb.dwarf2/comp-unit-lang/comp-unit-lang1.o:     file format elf64-x86-64

 Contents of section .debug_info:
  0000 2c000000 04000000 00000402 66696c65  ,...........file
  0010 312e7478 74000400 00000000 00000003  1.txt...........
  0020 0166756e 63000000 00000000 00000000  .func...........
 Contents of section .debug_abbrev:
  0000 02110103 08130d11 01120100 00032e01  ................
  0010 3f0c0308 11011201 00000000           ?...........
-Contents of section .debug_line:
- 0000 19000000 03001300 00000101 fb0e0d00  ................
- 0010 01010101 00000001 00000100 00        .............

What does .debug_line mean?
 http://dwarfstd.org/doc/DWARF4.pdf

3.1.1 Normal and Partial Compilation Unit Entries
 ...
Compilation unit entries may have the following attributes:
 ...
4. A DW_AT_stmt_list attribute whose value is a section offset to
   the line number information for this compilation unit.  This
   information is placed in a separate object file section from
   the debugging information entries themselves. The value of the
   statement list attribute is the offset in the .debug_line section
   of the first byte of the line number information for this
   compilation unit (see Section 6.2).

So, GCC has generated a .debug_line section?
Do other tests generate their own?
 Yes:
$ grep -l Dwarf::assemble baremetal-gcc-20200304-1/src/gdb/testsuite/gdb.dwarf2/*.exp | xargs grep stmt_list
baremetal-gcc-20200304-1/src/gdb/testsuite/gdb.dwarf2/dw2-bad-elf.exp:	    {stmt_list $L1 DW_FORM_sec_offset}
baremetal-gcc-20200304-1/src/gdb/testsuite/gdb.dwarf2/dw2-bad-elf.exp:	    {stmt_list $L2 DW_FORM_sec_offset}
baremetal-gcc-20200304-1/src/gdb/testsuite/gdb.dwarf2/dw2-inline-many-frames.exp:	    {stmt_list ${lines_label} DW_FORM_sec_offset}
baremetal-gcc-20200304-1/src/gdb/testsuite/gdb.dwarf2/dw2-inline-stepping.exp:	    {stmt_list ${lines_label} DW_FORM_sec_offset}
baremetal-gcc-20200304-1/src/gdb/testsuite/gdb.dwarf2/dw2-ranges-base.exp:	    {stmt_list $L DW_FORM_sec_offset}
baremetal-gcc-20200304-1/src/gdb/testsuite/gdb.dwarf2/dw2-ranges-func.exp:		{stmt_list $L DW_FORM_sec_offset}

Try: Add {stmt_list func_start addr} to clang:
  ln -s baremetal-clang-20200304-1/src
  ln -s baremetal-clang-20200304-1/build
  export RUNTESTFLAGS='CC_FOR_TARGET=clang CXX_FOR_TARGET=clang++'
  cd build
  make TESTS="gdb.dwarf2/comp-unit-lang.exp" check
   ...
   FAIL: gdb.dwarf2/comp-unit-lang.exp: show language
   ...
  less gdb/testsuite/gdb.log
  The current source language is "auto; currently c".
  diff -u baremetal-{gcc,clang}-20200304-1/build/gdb/testsuite/outputs/gdb.dwarf2/comp-unit-lang/comp-unit-lang.S
   -> it is different now
  objdump -s baremetal-clang-20200304-1/build/gdb/testsuite/outputs/gdb.dwarf2/comp-unit-lang/comp-unit-lang1.o | diff -u gdb.dwarf2_comp-unit-lang/obj1-clang-objdump-s -
   -> .debug_info, .debug_abbrev both different, still no .debug_lines

Try {stmt_list func_start func_end} instead?
 -> ERROR: unhandled form func_end

Try {stmt_list func_start DW_FORM_sec_offset} ?
 -> The current source language is "auto; currently c". again

Try with the actual section (d'oh!):
  cat /tmp/comp-unit-lang.exp > /gdbtest/baremetal-clang-20200304-1/src/gdb/testsuite/gdb.dwarf2/comp-unit-lang.exp

  now it has a .debug_line section!
  but section order is
  .debug_info
  .debug_line
  .debug_abbrev

  and with GCC its:
  .debug_info
  .debug_abbrev
  .debug_line

  also the .debug_line section is *slightly* shorter

Try with an empty 'program {}' in the .exp:
  same

objdump -s:
  GCC: Contents of section .debug_line:
        0000 19000000 03001300 00000101 fb0e0d00  ................
        0010 01010101 00000001 00000100 00        .............
  CLG: Contents of section .debug_line:
        0000 16000000 03000f00 00000101 01010a00  ................
        0010 01010101 00000001 0000               ..........

objdump -Wl for GCC:
  Offset:                      0x0
  Length:                      25	19 vs 16	22
  DWARF Version:               3
  Prologue Length:             19       13 vs 0f	15
  Minimum Instruction Length:  1
  Initial value of 'is_stmt':  1
  Line Base:                   -5	fb vs 01	1
  Line Range:                  14	oe vs 01	1
  Opcode Base:                 13	od vs 0a	10

What does the missing 000001 represent?

GCC has opcodes 1..12
Clang has opcodes 1..9

  Opcode 10 has 0 args 00
  Opcode 11 has 0 args 00
  Opcode 12 has 1 arg  01 ??

BM 8: ssh smash2
      sudo su - gdbtest
      mkdir -m700 .ssh
      rsync -av gary@localhost:.ssh/authorized_keys .ssh
      logout

      ssh gdbtest@smash2
      rsync -av gary@localhost:.gitconfig ~
      rsync -av gary@localhost:.emacs ~
      rsync -av gary@localhost:.el ~

      rm -Rf baremetal-gcc-20200304-1
      rm -Rf baremetal-clang-20200304-1
      tar xf baremetal-clang-20200304-1.tar --strip-components=1
      rm -f make-check.log

      cd src
      git st
      # ...
      # nothing to commit, working tree clean
      git show --no-abbrev-commit HEAD
      # commit 09624f1fece637e17c0c31f6b7589466402ea407
      # Author: Luis Machado <luis.machado@linaro.org>
      # Date:   Tue Feb 25 11:56:58 2020 -0300
      # ...

      cd ../build
      export RUNTESTFLAGS='CC_FOR_TARGET=clang CXX_FOR_TARGET=clang++'
      GCC:
        RUNTESTFLAGS= make check TESTS="gdb.base/jit.exp gdb.base/jit-so.exp"
        # of expected passes		65
      Clang:
        make check TESTS="gdb.base/jit.exp gdb.base/jit-so.exp"
	# of untested testcases		2

      cd ../src
      # ...and fix it...
      GCC:
        RUNTESTFLAGS= make -C /gdbtest/build check TESTS="gdb.base/jit.exp gdb.base/jit-so.exp"
        # of expected passes		65
      Clang:
        make -C /gdbtest/build check TESTS="gdb.base/jit.exp gdb.base/jit-so.exp"
        # of expected passes		65

      git remote set-url origin git@gitlab.com:gbenson/binutils-gdb.git

BM 9: ssh gdbtest@smash2
      export RUNTESTFLAGS='CC_FOR_TARGET=clang CXX_FOR_TARGET=clang++'
      cd src

      RUNTESTFLAGS= make -C /gdbtest/build check TESTS="gdb.trace/tspeed.exp"
      # of unsupported tests		1
      less ../build/gdb/testsuite/gdb.log
      # (gdb) tstatus
      # Trace can not be run on this target.
      # (gdb) UNSUPPORTED: gdb.trace/tspeed.exp: target does not support trace

      make -C /gdbtest/build check TESTS="gdb.trace/tspeed.exp"
      # of untested testcases		1

Cr 4: ssh smash
   # Ensure host system has the latest packages:
      sudo dnf -y update
      sudo reboot

      ssh smash
      cd ~/work/gdbtest
      podman login docker.io

   # Ensure build container has the latest packages:
      buildah bud \
        -t docker.io/gbenson/gdbtest-fedora31-base:latest \
        bases/fedora/31
      podman push docker.io/gbenson/gdbtest-fedora31-base:latest

   # Ensure we have sources for a recent gdb/master:
      buildah bud \
        -t docker.io/gbenson/gdbtest-fedora31-upstream-base:latest \
	builds/upstream/base
      podman push docker.io/gbenson/gdbtest-fedora31-upstream-base:latest

   # Ensure we have a recent gdb/master build:
      buildah bud \
        -t docker.io/gbenson/gdbtest-fedora31-upstream:latest \
	builds/upstream
      podman push docker.io/gbenson/gdbtest-fedora31-upstream:latest

   # Make a baremetal built source tarball:
   # window A):
      podman run -ti docker.io/gbenson/gdbtest-fedora31-upstream
        -> tar cPf /tmp/gdbtest-fedora31-upstream-22fed04ff20e.tar /gdbtest
        -> xz /tmp/gdbtest-fedora31-upstream-22fed04ff20e.tar

   # window B):
      podman ps  # NAMES=angry_williamson
      podman exec angry_williamson \
          cat /tmp/gdbtest-fedora31-upstream-22fed04ff20e.tar.xz \
	  > gdbtest-fedora31-upstream-22fed04ff20e.tar.xz
      sudo chown 0.0 gdbtest-fedora31-upstream-22fed04ff20e.tar.xz
      sudo mv gdbtest-fedora31-upstream-22fed04ff20e.tar.xz /gdbtest
      exit

   # window A again):
        -> exit
      podman rm angry_williamson

   # Run the tests with GCC:
      tar xPf 2020-04-23/gdbtest-fedora31-upstream-22fed04ff20e.tar.xz
      time make -C /gdbtest/build -k check >make-check.log 2>&1
      # real	27m16.895s
      # user	19m3.232s
      # sys	3m46.656s
      mkdir baremetal-gcc-20200423-1
      mv src build make-check.log baremetal-gcc-20200423-1
      rpm -qa | sort > baremetal-gcc-20200423-1/rpm-qa.sort
      tar cf baremetal-gcc-20200423-1{.tar,}
      xz baremetal-gcc-20200423-1.tar

   # Run the tests with Clang:
      time make -C /gdbtest/build -k \
        RUNTESTFLAGS="CC_FOR_TARGET=clang CXX_FOR_TARGET=clang++" \
        check >make-check.log 2>&1
      # real	43m53.951s
      # user	19m17.353s
      # sys	3m53.488s
      mkdir baremetal-clang-20200423-1
      mv src build make-check.log baremetal-clang-20200423-1
      rpm -qa | sort > baremetal-clang-20200423-1/rpm-qa.sort
      tar cf baremetal-clang-20200423-1{.tar,}
      xz baremetal-clang-20200423-1.tar
